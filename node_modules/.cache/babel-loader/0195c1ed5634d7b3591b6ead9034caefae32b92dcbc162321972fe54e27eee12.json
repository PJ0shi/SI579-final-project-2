{"ast":null,"code":"var _jsxFileName = \"/workspaces/SI579-final-project-2/src/Problem4.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n// Demonstrates how state can hold many pieces of data.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Problem4 = () => {\n  _s();\n  // @todo wire this form up so we can add reminders in the form\n  // that get listed in the other column.\n  const [inputText, setInputText] = useState('');\n  const [reminders, setReminders] = useState([]);\n  const addReminder = () => {\n    setReminders(previousValue => {\n      return [...previousValue, inputText];\n    });\n    setInputText('');\n  };\n\n  // When removing an item, you need something that \n  // identifies the item to be removed. \n  // Ideally there is an ID, but we're just going to match\n  // the reminder text.\n  const removeReminder = text => {\n    // Use filter to keep anything that doesn't match the \n    // `text` argument.\n    setReminders(reminders.filter(item => item !== text));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col col-sm-12 col-lg-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Add a reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        onInput: e => setInputText(e.target.value),\n        value: inputText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: addReminder,\n        children: \"Add Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col col-sm-12 col-lg-8\",\n      children: [reminders.length === 0 && 'no reminders yet', /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: reminders.length > 0 && reminders.map((reminder, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [reminder, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => removeReminder(reminder),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 42\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Problem4, \"W/wNFthE3fpDU0Cb4kOkUaIM8f8=\");\n_c = Problem4;\nexport default Problem4;\nvar _c;\n$RefreshReg$(_c, \"Problem4\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Problem4","_s","inputText","setInputText","reminders","setReminders","addReminder","previousValue","removeReminder","text","filter","item","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onInput","e","target","value","onClick","length","map","reminder","index","_c","$RefreshReg$"],"sources":["/workspaces/SI579-final-project-2/src/Problem4.js"],"sourcesContent":["import {useState} from \"react\";\r\n\r\n\r\n\r\n// Demonstrates how state can hold many pieces of data.\r\nconst Problem4 = () => {\r\n  // @todo wire this form up so we can add reminders in the form\r\n  // that get listed in the other column.\r\n  const [inputText, setInputText] = useState('')\r\n  const [reminders, setReminders] = useState([]);\r\n\r\n  const addReminder = () => {\r\n    setReminders((previousValue) => {\r\n      return [...previousValue, inputText]\r\n    })\r\n    setInputText('')\r\n  }\r\n\r\n  // When removing an item, you need something that \r\n  // identifies the item to be removed. \r\n  // Ideally there is an ID, but we're just going to match\r\n  // the reminder text.\r\n  const removeReminder = (text) => {\r\n      // Use filter to keep anything that doesn't match the \r\n      // `text` argument.\r\n      setReminders(\r\n        reminders.filter((item) => item !== text)\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col col-sm-12 col-lg-4'>\r\n        <label className=\"form-label\">Add a reminder</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          onInput={(e) => setInputText(e.target.value)}\r\n          value={inputText}\r\n        />\r\n        <button className='btn btn-primary' onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n\r\n\r\n      {/* the returned list of reminders */}\r\n      <div className='col col-sm-12 col-lg-8'>\r\n        {reminders.length === 0 && 'no reminders yet'}\r\n        <ul>\r\n        {reminders.length > 0 && \r\n            reminders.map((reminder, index) =>\r\n              <li key={index}>{reminder} <button onClick={(e) => removeReminder(reminder)} >X</button></li>)}\r\n        </ul>\r\n\r\n        <ul>\r\n\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Problem4;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}