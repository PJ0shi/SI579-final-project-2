{"ast":null,"code":"var _jsxFileName = \"/workspaces/SI579-final-project-2/src/FeedbackForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport FormItem from \"./FormItem.js\";\nimport FeedbackCard from \"./FeedbackCard.js\";\nimport Card from \"react-bootstrap/Card\";\n\n//These are the initial form values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  firstName: \"\",\n  lastName: \"\",\n  startDate: \"\",\n  endDate: \"\"\n};\nconst FeedbackForm = () => {\n  _s();\n  //data for the entire form\n  const [formData, setFormData] = useState(initialFormValues);\n  // const noneEmpty = Object.values(formData).every(item => item.length > 0)\n\n  //checking if the form fields are empty (noneEmpty=true if all are filled) \n  const noneEmpty = String(formData.firstName) !== \"\" && String(formData.startDate) !== \"\" && String(formData.course) !== \"\" && String(formData.feedback) !== \"\";\n\n  //list of all the feedbacks\n  const [feedbacks, setFeedbacks] = useState([]);\n\n  // updates feedbacks through setFeedbacks \n  const addFeedback = () => {\n    setFeedbacks(previousValue => {\n      const newFeedbacks = [...previousValue, formData];\n      saveFeedbacksToLocalStorage(newFeedbacks);\n      return newFeedbacks;\n    });\n    setFormData(initialFormValues);\n  };\n  useEffect(() => {\n    // Load feedbacks from local storage on component mount\n    const storedFeedbacks = JSON.parse(localStorage.getItem(\"feedbacks\")) || [];\n    setFeedbacks(storedFeedbacks);\n  }, []); // Empty dependency array to run this effect only once on mount\n\n  const saveFeedbacksToLocalStorage = newFeedbacks => {\n    // Save feedbacks to local storage whenever the state is updated\n    localStorage.setItem(\"feedbacks\", JSON.stringify(newFeedbacks));\n  };\n\n  //updates feedbacks through setFeedbacks by removing a feedback\n  const removeFeedback = text => {\n    setFeedbacks(previousFeedbacks => previousFeedbacks.filter(feedback => feedback.firstName !== text));\n  };\n\n  //updates formData through setFormData when user inputs values\n  const inputHandler = (e, stateName) => {\n    setFormData(previousState => {\n      return {\n        ...previousState,\n        [stateName]: e.target.value\n      };\n    });\n  };\n\n  //Submitting the form\n  const submitForm = e => {\n    e.preventDefault();\n    setFormData(initialFormValues);\n    // Call the updateReminder function passed down from the parent component\n  };\n\n  //updating Feedback during edit mode\n  const updateFeedback = (firstName, updatedFeedback) => {\n    // Implement logic to update the reminder in your data store or state\n    // For example, if reminders is a state variable:\n    setFeedbacks(prevFeedbacks => prevFeedbacks.map(feedback => feedback.firstName === firstName ? {\n      ...feedback,\n      feedback: updatedFeedback\n    } : feedback));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: \"60rem\",\n        padding: \"2rem\",\n        margin: \"2%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"col col-sm-12 col-lg-5\",\n        onSubmit: submitForm,\n        children: [/*#__PURE__*/_jsxDEV(FormItem, {\n          label: \"Name\",\n          stateName: \"firstName\",\n          type: \"text\",\n          formData: formData,\n          inputHandler: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormItem, {\n          label: \"Entry Date\",\n          stateName: \"startDate\",\n          type: \"date\",\n          formData: formData,\n          inputHandler: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormItem, {\n          label: \"Course\",\n          stateName: \"course\",\n          type: \"text\",\n          formData: formData,\n          inputHandler: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormItem, {\n          label: \"Feedback\",\n          stateName: \"feedback\",\n          type: \"text\",\n          formData: formData,\n          inputHandler: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            onClick: addFeedback,\n            disabled: !noneEmpty,\n            children: \"Add Feedback\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col col-sm-12 col-lg-8\",\n      children: [feedbacks.length === 0 && \"no entries\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: feedbacks.length > 0 && feedbacks.map((feedback, index) =>\n        /*#__PURE__*/\n        // <li key={index}>{`${reminder.firstName} ${reminder.lastName} ${reminder.startDate} ${reminder.course}`}<button onClick={(e) => removeReminder(reminder.firstName)} >X</button></li>)}\n        _jsxDEV(FeedbackCard, {\n          feedback: feedback,\n          removeFeedback: removeFeedback\n          //updateFeedback={updateFeedback}\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n};\n_s(FeedbackForm, \"+XAP+KI+2uQB1uNdX+mFuxpLmVA=\");\n_c = FeedbackForm;\nexport default FeedbackForm;\nvar _c;\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"names":["useState","useEffect","FormItem","FeedbackCard","Card","jsxDEV","_jsxDEV","initialFormValues","firstName","lastName","startDate","endDate","FeedbackForm","_s","formData","setFormData","noneEmpty","String","course","feedback","feedbacks","setFeedbacks","addFeedback","previousValue","newFeedbacks","saveFeedbacksToLocalStorage","storedFeedbacks","JSON","parse","localStorage","getItem","setItem","stringify","removeFeedback","text","previousFeedbacks","filter","inputHandler","e","stateName","previousState","target","value","submitForm","preventDefault","updateFeedback","updatedFeedback","prevFeedbacks","map","children","style","width","padding","margin","className","onSubmit","label","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","index","_c","$RefreshReg$"],"sources":["/workspaces/SI579-final-project-2/src/FeedbackForm.js"],"sourcesContent":["import { useState, useEffect} from \"react\";\r\nimport FormItem from \"./FormItem.js\";\r\nimport FeedbackCard from \"./FeedbackCard.js\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\n//These are the initial form values\r\nconst initialFormValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  startDate: \"\",\r\n  endDate: \"\",\r\n};\r\n\r\n\r\nconst FeedbackForm = () => {\r\n//data for the entire form\r\n  const [formData, setFormData] = useState(initialFormValues);\r\n  // const noneEmpty = Object.values(formData).every(item => item.length > 0)\r\n\r\n//checking if the form fields are empty (noneEmpty=true if all are filled) \r\n  const noneEmpty =\r\n    String(formData.firstName) !== \"\" &&\r\n    String(formData.startDate) !== \"\" &&\r\n    String(formData.course) !== \"\" &&\r\n    String(formData.feedback) !== \"\";\r\n\r\n  //list of all the feedbacks\r\n  const [feedbacks, setFeedbacks] = useState([]);\r\n\r\n  // updates feedbacks through setFeedbacks \r\n  const addFeedback = () => {\r\n    setFeedbacks((previousValue) => {\r\n      const newFeedbacks = [...previousValue, formData];\r\n      saveFeedbacksToLocalStorage(newFeedbacks);\r\n      return newFeedbacks;\r\n    });\r\n\r\n    setFormData(initialFormValues);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Load feedbacks from local storage on component mount\r\n    const storedFeedbacks = JSON.parse(localStorage.getItem(\"feedbacks\")) || [];\r\n    setFeedbacks(storedFeedbacks);\r\n  }, []); // Empty dependency array to run this effect only once on mount\r\n\r\n  const saveFeedbacksToLocalStorage = (newFeedbacks) => {\r\n    // Save feedbacks to local storage whenever the state is updated\r\n    localStorage.setItem(\"feedbacks\", JSON.stringify(newFeedbacks));\r\n  };\r\n\r\n//updates feedbacks through setFeedbacks by removing a feedback\r\n  const removeFeedback = (text) => {\r\n    setFeedbacks((previousFeedbacks) =>\r\n      previousFeedbacks.filter((feedback) => feedback.firstName !== text)\r\n    );\r\n  };\r\n\r\n  //updates formData through setFormData when user inputs values\r\n  const inputHandler = (e, stateName) => {\r\n    setFormData((previousState) => {\r\n      return {\r\n        ...previousState,\r\n        [stateName]: e.target.value,\r\n      };\r\n    });\r\n  };\r\n\r\n//Submitting the form\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    setFormData(initialFormValues);\r\n    // Call the updateReminder function passed down from the parent component\r\n  };\r\n\r\n//updating Feedback during edit mode\r\n  const updateFeedback = (firstName, updatedFeedback) => {\r\n    // Implement logic to update the reminder in your data store or state\r\n    // For example, if reminders is a state variable:\r\n    setFeedbacks((prevFeedbacks) =>\r\n      prevFeedbacks.map((feedback) =>\r\n      feedback.firstName === firstName\r\n          ? { ...feedback, feedback: updatedFeedback }\r\n          : feedback\r\n      )\r\n    );\r\n  }\r\n  \r\n    return (\r\n      <div>\r\n        <Card style={{ width: \"60rem\", padding: \"2rem\", margin: \"2%\" }}>\r\n          <form className=\"col col-sm-12 col-lg-5\" onSubmit={submitForm}>\r\n            <FormItem\r\n              label=\"Name\"\r\n              stateName=\"firstName\"\r\n              type=\"text\"\r\n              formData={formData}\r\n              inputHandler={inputHandler}\r\n            />\r\n            {/* <FormItem label=\"Last Name\" stateName=\"lastName\" type=\"text\" formData={formData} inputHandler={inputHandler} />       */}\r\n            <FormItem\r\n              label=\"Entry Date\"\r\n              stateName=\"startDate\"\r\n              type=\"date\"\r\n              formData={formData}\r\n              inputHandler={inputHandler}\r\n            />\r\n            {/* <FormItem label=\"End Date\" stateName=\"endDate\" type=\"date\" formData={formData} inputHandler={inputHandler} />       */}\r\n            <FormItem\r\n              label=\"Course\"\r\n              stateName=\"course\"\r\n              type=\"text\"\r\n              formData={formData}\r\n              inputHandler={inputHandler}\r\n            />\r\n            <FormItem\r\n              label=\"Feedback\"\r\n              stateName=\"feedback\"\r\n              type=\"text\"\r\n              formData={formData}\r\n              inputHandler={inputHandler}\r\n            />\r\n\r\n            <div className=\"mb-3\">\r\n              {/* <button disabled={!noneEmpty && !startBeforeEnd} type='submit'>Submit Vacation Request</button> */}\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary\"\r\n                onClick={addFeedback}\r\n                disabled={!noneEmpty}\r\n              >\r\n                Add Feedback\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Card>\r\n\r\n        {/* the returned list of reminders */}\r\n        <div className=\"col col-sm-12 col-lg-8\">\r\n          {feedbacks.length === 0 && \"no entries\"}\r\n          <ul>\r\n            {feedbacks.length > 0 &&\r\n              feedbacks.map((feedback, index) => (\r\n                // <li key={index}>{`${reminder.firstName} ${reminder.lastName} ${reminder.startDate} ${reminder.course}`}<button onClick={(e) => removeReminder(reminder.firstName)} >X</button></li>)}\r\n                <FeedbackCard\r\n                  key={index}\r\n                  feedback={feedback}\r\n                  removeFeedback={removeFeedback}\r\n                  //updateFeedback={updateFeedback}\r\n                />\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default FeedbackForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}